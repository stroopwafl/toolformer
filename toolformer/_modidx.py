# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/toolformer',
                'doc_host': 'https://stroopwafl.github.io',
                'git_url': 'https://github.com/stroopwafl/toolformer',
                'lib_path': 'toolformer'},
  'syms': { 'toolformer.core': { 'toolformer.core.get_device': ('core.html#get_device', 'toolformer/core.py'),
                                 'toolformer.core.plot_images': ('core.html#plot_images', 'toolformer/core.py')},
            'toolformer.datasets': { 'toolformer.datasets.PromptDS': ('datasets.html#promptds', 'toolformer/datasets.py'),
                                     'toolformer.datasets.PromptDS.__getitem__': ( 'datasets.html#promptds.__getitem__',
                                                                                   'toolformer/datasets.py'),
                                     'toolformer.datasets.PromptDS.__init__': ('datasets.html#promptds.__init__', 'toolformer/datasets.py'),
                                     'toolformer.datasets.PromptDS.__len__': ('datasets.html#promptds.__len__', 'toolformer/datasets.py'),
                                     'toolformer.datasets.format_date': ('datasets.html#format_date', 'toolformer/datasets.py'),
                                     'toolformer.datasets.get_prompt': ('datasets.html#get_prompt', 'toolformer/datasets.py'),
                                     'toolformer.datasets.make_dateset': ('datasets.html#make_dateset', 'toolformer/datasets.py'),
                                     'toolformer.datasets.random_date': ('datasets.html#random_date', 'toolformer/datasets.py')},
            'toolformer.filtering': { 'toolformer.filtering.build_finetune_dataset': ( 'toolformer.html#build_finetune_dataset',
                                                                                       'toolformer/filtering.py'),
                                      'toolformer.filtering.filter_and_retain_only_first_api': ( 'toolformer.html#filter_and_retain_only_first_api',
                                                                                                 'toolformer/filtering.py'),
                                      'toolformer.filtering.format_api_calls': ( 'toolformer.html#format_api_calls',
                                                                                 'toolformer/filtering.py'),
                                      'toolformer.filtering.get_probs': ('toolformer.html#get_probs', 'toolformer/filtering.py'),
                                      'toolformer.filtering.get_weights': ('toolformer.html#get_weights', 'toolformer/filtering.py'),
                                      'toolformer.filtering.make_api_calls': ('toolformer.html#make_api_calls', 'toolformer/filtering.py'),
                                      'toolformer.filtering.sample': ('toolformer.html#sample', 'toolformer/filtering.py'),
                                      'toolformer.filtering.toolformer_probability_filter': ( 'toolformer.html#toolformer_probability_filter',
                                                                                              'toolformer/filtering.py'),
                                      'toolformer.filtering.weight_func': ('toolformer.html#weight_func', 'toolformer/filtering.py')},
            'toolformer.finetune': { 'toolformer.finetune.FinetuneDS': ('finetune.html#finetuneds', 'toolformer/finetune.py'),
                                     'toolformer.finetune.FinetuneDS.__getitem__': ( 'finetune.html#finetuneds.__getitem__',
                                                                                     'toolformer/finetune.py'),
                                     'toolformer.finetune.FinetuneDS.__init__': ( 'finetune.html#finetuneds.__init__',
                                                                                  'toolformer/finetune.py'),
                                     'toolformer.finetune.FinetuneDS.__len__': ( 'finetune.html#finetuneds.__len__',
                                                                                 'toolformer/finetune.py'),
                                     'toolformer.finetune.finetune': ('finetune.html#finetune', 'toolformer/finetune.py'),
                                     'toolformer.finetune.get_gen': ('finetune.html#get_gen', 'toolformer/finetune.py'),
                                     'toolformer.finetune.load_lora_weights': ('finetune.html#load_lora_weights', 'toolformer/finetune.py'),
                                     'toolformer.finetune.save_model_weights': ( 'finetune.html#save_model_weights',
                                                                                 'toolformer/finetune.py'),
                                     'toolformer.finetune.set_grads': ('finetune.html#set_grads', 'toolformer/finetune.py')},
            'toolformer.model': { 'toolformer.model.Attention': ('model.html#attention', 'toolformer/model.py'),
                                  'toolformer.model.Attention.__init__': ('model.html#attention.__init__', 'toolformer/model.py'),
                                  'toolformer.model.Attention.forward': ('model.html#attention.forward', 'toolformer/model.py'),
                                  'toolformer.model.FeedForward': ('model.html#feedforward', 'toolformer/model.py'),
                                  'toolformer.model.FeedForward.__init__': ('model.html#feedforward.__init__', 'toolformer/model.py'),
                                  'toolformer.model.FeedForward.forward': ('model.html#feedforward.forward', 'toolformer/model.py'),
                                  'toolformer.model.LoRA': ('model.html#lora', 'toolformer/model.py'),
                                  'toolformer.model.LoRA.__init__': ('model.html#lora.__init__', 'toolformer/model.py'),
                                  'toolformer.model.LoRA.forward': ('model.html#lora.forward', 'toolformer/model.py'),
                                  'toolformer.model.LoRA.reset_lora_parameters': ( 'model.html#lora.reset_lora_parameters',
                                                                                   'toolformer/model.py'),
                                  'toolformer.model.LoRA.upgrade_state_dict_named': ( 'model.html#lora.upgrade_state_dict_named',
                                                                                      'toolformer/model.py'),
                                  'toolformer.model.ModelArgs': ('model.html#modelargs', 'toolformer/model.py'),
                                  'toolformer.model.RMSNorm': ('model.html#rmsnorm', 'toolformer/model.py'),
                                  'toolformer.model.RMSNorm.__init__': ('model.html#rmsnorm.__init__', 'toolformer/model.py'),
                                  'toolformer.model.RMSNorm._norm': ('model.html#rmsnorm._norm', 'toolformer/model.py'),
                                  'toolformer.model.RMSNorm.forward': ('model.html#rmsnorm.forward', 'toolformer/model.py'),
                                  'toolformer.model.Transformer': ('model.html#transformer', 'toolformer/model.py'),
                                  'toolformer.model.Transformer.__init__': ('model.html#transformer.__init__', 'toolformer/model.py'),
                                  'toolformer.model.Transformer.forward': ('model.html#transformer.forward', 'toolformer/model.py'),
                                  'toolformer.model.TransformerBlock': ('model.html#transformerblock', 'toolformer/model.py'),
                                  'toolformer.model.TransformerBlock.__init__': ( 'model.html#transformerblock.__init__',
                                                                                  'toolformer/model.py'),
                                  'toolformer.model.TransformerBlock.forward': ( 'model.html#transformerblock.forward',
                                                                                 'toolformer/model.py'),
                                  'toolformer.model.apply_rotary_emb': ('model.html#apply_rotary_emb', 'toolformer/model.py'),
                                  'toolformer.model.precompute_freqs_cis': ('model.html#precompute_freqs_cis', 'toolformer/model.py'),
                                  'toolformer.model.reshape_for_broadcast': ('model.html#reshape_for_broadcast', 'toolformer/model.py'),
                                  'toolformer.model.sample_top_p': ('model.html#sample_top_p', 'toolformer/model.py'),
                                  'toolformer.model.setup_model_parallel': ('model.html#setup_model_parallel', 'toolformer/model.py')},
            'toolformer.tokenizer': { 'toolformer.tokenizer.Tokenizer': ('tokenizer.html#tokenizer', 'toolformer/tokenizer.py'),
                                      'toolformer.tokenizer.Tokenizer.__init__': ( 'tokenizer.html#tokenizer.__init__',
                                                                                   'toolformer/tokenizer.py'),
                                      'toolformer.tokenizer.Tokenizer.decode': ( 'tokenizer.html#tokenizer.decode',
                                                                                 'toolformer/tokenizer.py'),
                                      'toolformer.tokenizer.Tokenizer.encode': ( 'tokenizer.html#tokenizer.encode',
                                                                                 'toolformer/tokenizer.py'),
                                      'toolformer.tokenizer.decode_tokens': ('tokenizer.html#decode_tokens', 'toolformer/tokenizer.py'),
                                      'toolformer.tokenizer.encode_to_tensor': ( 'tokenizer.html#encode_to_tensor',
                                                                                 'toolformer/tokenizer.py')},
            'toolformer.tools': { 'toolformer.tools.Calculator': ('tools.html#calculator', 'toolformer/tools.py'),
                                  'toolformer.tools.Calendar': ('tools.html#calendar', 'toolformer/tools.py')}}}
